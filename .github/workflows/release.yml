name: Release BastionBuddy

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          if ! command -v zip &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y zip
          fi

      - name: Build release binaries
        run: |
          echo "Building version: $VERSION"
          make release VERSION=$VERSION
        env:
          VERSION: ${{ env.VERSION }}

      - name: Upload artifacts for signing
        uses: actions/upload-artifact@v4
        with:
          name: windows-executables
          path: |
            builds/windows_amd64/bastionbuddy.exe
            builds/windows_arm64/bastionbuddy.exe

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-artifacts
          path: builds/

  sign-windows:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download Windows executables
        uses: actions/download-artifact@v4
        with:
          name: windows-executables
          path: windows-executables

      - name: List files
        shell: cmd
        run: |
          dir /s /b windows-executables

      - name: Sign Windows executables
        uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.WINDOWS_CERTIFICATE }}'
          folder: 'windows-executables'
          recursive: true
          files: |
            *.exe
          description: 'BastionBuddy - Azure Bastion Connection Utility'

      - name: Upload signed executables
        uses: actions/upload-artifact@v4
        with:
          name: signed-windows-executables
          path: windows-executables/**/*.exe

  create-release:
    needs: [build, sign-windows]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: all-artifacts
          path: artifacts

      - name: Download signed Windows executables
        uses: actions/download-artifact@v4
        with:
          name: signed-windows-executables
          path: artifacts

      - name: Prepare release files
        run: |
          cd artifacts
          # Create archives for non-Windows platforms
          for os in darwin linux; do
            for arch in amd64 arm64; do
              if [ -f ${os}_${arch}/bastionbuddy ]; then
                tar czf bastionbuddy_${os}_${arch}.tar.gz -C ${os}_${arch} bastionbuddy
              fi
            done
          done
          
          # Handle Windows executables - keep original name bastionbuddy.exe
          for arch in amd64 arm64; do
            if [ -f windows_${arch}/bastionbuddy.exe ]; then
              # Create a temporary directory for each architecture
              mkdir -p tmp_windows_${arch}
              cp windows_${arch}/bastionbuddy.exe tmp_windows_${arch}/bastionbuddy.exe
              # Create zip from the temp directory
              (cd tmp_windows_${arch} && zip ../bastionbuddy_windows_${arch}.zip bastionbuddy.exe)
              rm -rf tmp_windows_${arch}
            fi
          done
          
          # List all created archives
          echo "Created archives:"
          ls -la bastionbuddy_*

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          # Try to get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # No previous tag found - list all commits
            COMMITS=$(git log --pretty=format:"* %s")
            CHANGELOG="Initial release with the following changes:${COMMITS//$'\n'/\\n}"
          else
            # Get changes since the previous tag
            COMMITS=$(git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD)
            CHANGELOG="Changes since ${PREVIOUS_TAG}:${COMMITS//$'\n'/\\n}"
          fi
          
          # Escape the changelog for GitHub Actions output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "CHANGELOG=$CHANGELOG" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: BastionBuddy ${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: |
            artifacts/bastionbuddy_*.zip
            artifacts/bastionbuddy_*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup build directories
        run: make cleanup

      - name: Notify Homebrew Tap
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          repository: antnsn/homebrew-bastionbuddy
          event-type: update_formula
          client-payload: '{"version": "${{ env.VERSION }}", "ref": "${{ github.sha }}"}'
