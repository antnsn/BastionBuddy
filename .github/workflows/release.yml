name: Release BastionBuddy

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          if ! command -v zip &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y zip
          fi

      - name: Build release binaries
        run: make release
        env:
          VERSION: ${{ env.VERSION }}

      - name: Upload artifacts for signing
        uses: actions/upload-artifact@v3
        with:
          name: windows-executables
          path: builds/*windows*/bastionbuddy.exe

      - name: Upload all artifacts
        uses: actions/upload-artifact@v3
        with:
          name: all-artifacts
          path: builds/

  sign-windows:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Windows executables
        uses: actions/download-artifact@v3
        with:
          name: windows-executables
          path: windows-executables

      - name: Install Windows SDK
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Import Code Signing Certificate
        shell: pwsh
        run: |
          $certBytes = [Convert]::FromBase64String("${{ secrets.WINDOWS_CERTIFICATE }}")
          $certPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "certificate.pfx"
          [IO.File]::WriteAllBytes($certPath, $certBytes)
          
      - name: Sign Windows executables
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path "windows-executables" -Recurse -Filter "*.exe"
          foreach ($file in $files) {
              signtool sign /f "$env:RUNNER_TEMP\certificate.pfx" /tr http://timestamp.digicert.com /td sha256 /fd sha256 $file.FullName
          }

      - name: Upload signed executables
        uses: actions/upload-artifact@v3
        with:
          name: signed-windows-executables
          path: windows-executables/*.exe

  create-release:
    needs: [build, sign-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          name: all-artifacts
          path: builds

      - name: Download signed Windows executables
        uses: actions/download-artifact@v3
        with:
          name: signed-windows-executables
          path: signed-windows

      - name: Replace unsigned executables with signed ones
        run: |
          find signed-windows -name "*.exe" -exec cp {} builds/windows_amd64/ \;
          find signed-windows -name "*.exe" -exec cp {} builds/windows_arm64/ \;

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          # Try to get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # No previous tag found - list all commits
            COMMITS=$(git log --pretty=format:"* %s")
            CHANGELOG="Initial release with the following changes:${COMMITS//$'\n'/\\n}"
          else
            # Get changes since the previous tag
            COMMITS=$(git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD)
            CHANGELOG="Changes since ${PREVIOUS_TAG}:${COMMITS//$'\n'/\\n}"
          fi
          
          # Escape the changelog for GitHub Actions output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "CHANGELOG=$CHANGELOG" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: |
            builds/bastionbuddy_*.tar.gz
            builds/bastionbuddy_*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
